/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Video;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-16T17:45:57.620163600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "home", description = "Endpoints de recomendaciones generales y personalizadas")
public interface HomeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /home/popular : Recomendaciones de videos populares
     * Obtiene una lista de videos populares basados en visualizaciones generales.
     *
     * @return Lista de videos populares obtenida exitosamente (status code 200)
     *         or Error al obtener los videos populares (status code 500)
     */
    @Operation(
        operationId = "getPopularVideos",
        summary = "Recomendaciones de videos populares",
        description = "Obtiene una lista de videos populares basados en visualizaciones generales.",
        tags = { "home" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de videos populares obtenida exitosamente", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Video.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Error al obtener los videos populares")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/home/popular",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Video>> getPopularVideos(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 }, { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /home/duration : Recomendaciones por duración
     * Obtiene una lista de videos filtrados por duración.
     *
     * @param minDuration Duración mínima del video en minutos (required)
     * @return Lista de videos filtrados por duración obtenida exitosamente (status code 200)
     *         or Parámetros de duración no válidos (status code 400)
     *         or Error al obtener los videos por duración (status code 500)
     */
    @Operation(
        operationId = "getVideosByDuration",
        summary = "Recomendaciones por duración",
        description = "Obtiene una lista de videos filtrados por duración.",
        tags = { "home" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de videos filtrados por duración obtenida exitosamente", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Video.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Parámetros de duración no válidos"),
            @ApiResponse(responseCode = "500", description = "Error al obtener los videos por duración")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/home/duration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Video>> getVideosByDuration(
        @NotNull @Parameter(name = "minDuration", description = "Duración mínima del video en minutos", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "minDuration", required = true) Integer minDuration
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 }, { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /home/genres : Recomendaciones por género
     * Obtiene una lista de videos recomendados por género.
     *
     * @param genre Género para filtrar los videos (required)
     * @return Lista de videos filtrados por género obtenida exitosamente (status code 200)
     *         or Género no válido (status code 400)
     *         or Error al obtener los videos por género (status code 500)
     */
    @Operation(
        operationId = "getVideosByGenre",
        summary = "Recomendaciones por género",
        description = "Obtiene una lista de videos recomendados por género.",
        tags = { "home" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de videos filtrados por género obtenida exitosamente", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Video.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Género no válido"),
            @ApiResponse(responseCode = "500", description = "Error al obtener los videos por género")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/home/genres",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Video>> getVideosByGenre(
        @NotNull @Parameter(name = "genre", description = "Género para filtrar los videos", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "genre", required = true) String genre
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 }, { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /home/followingProfiles : Recomendaciones de videos basadas en perfiles seguidos
     * Obtiene recomendaciones basadas en los videos de perfiles seguidos por el usuario. El usuario debe haber iniciado sesion.
     *
     * @return Lista de videos de perfiles seguidos obtenida exitosamente (status code 200)
     *         or No autorizado. Se requiere autenticación. (status code 401)
     *         or Error al obtener videos de perfiles seguidos (status code 500)
     */
    @Operation(
        operationId = "getVideosFromFollowingProfiles",
        summary = "Recomendaciones de videos basadas en perfiles seguidos",
        description = "Obtiene recomendaciones basadas en los videos de perfiles seguidos por el usuario. El usuario debe haber iniciado sesion.",
        tags = { "home" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de videos de perfiles seguidos obtenida exitosamente", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Video.class)))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado. Se requiere autenticación."),
            @ApiResponse(responseCode = "500", description = "Error al obtener videos de perfiles seguidos")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/home/followingProfiles",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Video>> getVideosFromFollowingProfiles(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 }, { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /home/search : Búsqueda de videos por título
     * Busca videos por título y devuelve resultados coincidentes.
     *
     * @param title Título del video a buscar (required)
     * @return Lista de videos coincidentes con el título (status code 200)
     *         or Parámetro de título no válido (status code 400)
     *         or No se encontraron videos coincidentes (status code 404)
     *         or Error al realizar la búsqueda (status code 500)
     */
    @Operation(
        operationId = "searchVideosByTitle",
        summary = "Búsqueda de videos por título",
        description = "Busca videos por título y devuelve resultados coincidentes.",
        tags = { "home" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de videos coincidentes con el título", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Video.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Parámetro de título no válido"),
            @ApiResponse(responseCode = "404", description = "No se encontraron videos coincidentes"),
            @ApiResponse(responseCode = "500", description = "Error al realizar la búsqueda")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/home/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Video>> searchVideosByTitle(
        @NotNull @Parameter(name = "title", description = "Título del video a buscar", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "title", required = true) String title
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 }, { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
